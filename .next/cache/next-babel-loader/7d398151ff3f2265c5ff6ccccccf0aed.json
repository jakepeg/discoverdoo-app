{"ast":null,"code":"import auth0 from 'auth0-js';\nimport Cookies from 'js-cookie';\nconst CLIENT_URL = process.env.CLIENT_URL;\n\nclass Auth0 {\n  constructor() {\n    this.auth0 = new auth0.WebAuth({\n      domain: 'jakepeg.eu.auth0.com',\n      clientID: '6w0luoKEKUH4QLOImluA81kNf3jLmWbr',\n      redirectUri: `${CLIENT_URL}/callback`,\n      responseType: 'token id_token',\n      scope: 'openid profile'\n    });\n    this.login = this.login.bind(this);\n    this.loginAddActivity = this.loginAddActivity.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n  }\n\n  handleAuthentication() {\n    return new Promise((resolve, reject) => {\n      this.auth0.parseHash((err, authResult) => {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          this.setSession(authResult);\n          resolve();\n        } else if (err) {\n          reject(err);\n          console.log(err);\n        }\n      });\n    });\n  }\n\n  setSession(authResult) {\n    // let expiresAt = JSON.stringify((authResult.expiresIn * 1000) + new Date().getTime())\n    // let expiresAt = JSON.stringify(authResult.expiresIn)\n    let expiresAt = new Date();\n    expiresAt.setDate(expiresAt.getDate() + 1);\n    Cookies.set('user', authResult.idTokenPayload, {\n      expires: 1\n    });\n    Cookies.set('jwt', authResult.idToken, {\n      expires: 1\n    });\n    Cookies.set('expiresAt', expiresAt, {\n      expires: 1\n    });\n    Cookies.set('sub', authResult.idTokenPayload.sub, {\n      expires: 1\n    });\n  }\n\n  logout() {\n    Cookies.remove('user');\n    Cookies.remove('jwt');\n    Cookies.remove('expiresAt');\n    Cookies.remove('sub');\n    Cookies.remove('returnURL');\n    this.auth0.logout({\n      returnTo: CLIENT_URL,\n      clientID: '6w0luoKEKUH4QLOImluA81kNf3jLmWbr'\n    });\n  }\n\n  login() {\n    Cookies.set('returnURL', '/');\n    this.auth0.authorize();\n    console.log(CLIENT_URL);\n  }\n\n  loginAddActivity() {\n    Cookies.set('returnURL', '/create');\n    this.auth0.authorize();\n  }\n\n  isAuthenticated() {\n    const expiresAt = Cookies.get('expiresAt');\n    return new Date().getTime() < expiresAt;\n  }\n\n}\n\nconst auth0Client = new Auth0();\nexport default auth0Client;","map":{"version":3,"sources":["/Users/Dev/Documents/discoverdoo-app/services/auth0.js"],"names":["auth0","Cookies","CLIENT_URL","process","env","Auth0","constructor","WebAuth","domain","clientID","redirectUri","responseType","scope","login","bind","loginAddActivity","logout","handleAuthentication","isAuthenticated","Promise","resolve","reject","parseHash","err","authResult","accessToken","idToken","setSession","console","log","expiresAt","Date","setDate","getDate","set","idTokenPayload","expires","sub","remove","returnTo","authorize","get","getTime","auth0Client"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,MAAMC,UAAU,GAAGC,OAAO,CAACC,GAAR,CAAYF,UAA/B;;AAEA,MAAMG,KAAN,CAAY;AAEVC,EAAAA,WAAW,GAAG;AACZ,SAAKN,KAAL,GAAa,IAAIA,KAAK,CAACO,OAAV,CAAkB;AAC7BC,MAAAA,MAAM,EAAE,sBADqB;AAE7BC,MAAAA,QAAQ,EAAE,kCAFmB;AAG7BC,MAAAA,WAAW,EAAG,GAAER,UAAW,WAHE;AAI7BS,MAAAA,YAAY,EAAE,gBAJe;AAK7BC,MAAAA,KAAK,EAAE;AALsB,KAAlB,CAAb;AAQA,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBD,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKE,MAAL,GAAc,KAAKA,MAAL,CAAYF,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKG,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BH,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKI,eAAL,GAAuB,KAAKA,eAAL,CAAqBJ,IAArB,CAA0B,IAA1B,CAAvB;AACD;;AAEDG,EAAAA,oBAAoB,GAAG;AACrB,WAAO,IAAIE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,WAAKrB,KAAL,CAAWsB,SAAX,CAAqB,CAACC,GAAD,EAAMC,UAAN,KAAqB;AACxC,YAAIA,UAAU,IAAIA,UAAU,CAACC,WAAzB,IAAwCD,UAAU,CAACE,OAAvD,EAAgE;AAC9D,eAAKC,UAAL,CAAgBH,UAAhB;AACAJ,UAAAA,OAAO;AACR,SAHD,MAGO,IAAIG,GAAJ,EAAS;AACdF,UAAAA,MAAM,CAACE,GAAD,CAAN;AACAK,UAAAA,OAAO,CAACC,GAAR,CAAYN,GAAZ;AACD;AACF,OARD;AASD,KAVM,CAAP;AAWD;;AAEDI,EAAAA,UAAU,CAACH,UAAD,EAAa;AACrB;AAEA;AACA,QAAIM,SAAS,GAAG,IAAIC,IAAJ,EAAhB;AACAD,IAAAA,SAAS,CAACE,OAAV,CAAkBF,SAAS,CAACG,OAAV,KAAsB,CAAxC;AACAhC,IAAAA,OAAO,CAACiC,GAAR,CAAY,MAAZ,EAAoBV,UAAU,CAACW,cAA/B,EAA+C;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAA/C;AACAnC,IAAAA,OAAO,CAACiC,GAAR,CAAY,KAAZ,EAAmBV,UAAU,CAACE,OAA9B,EAAuC;AAAEU,MAAAA,OAAO,EAAE;AAAX,KAAvC;AACAnC,IAAAA,OAAO,CAACiC,GAAR,CAAY,WAAZ,EAAyBJ,SAAzB,EAAoC;AAAEM,MAAAA,OAAO,EAAE;AAAX,KAApC;AACAnC,IAAAA,OAAO,CAACiC,GAAR,CAAY,KAAZ,EAAmBV,UAAU,CAACW,cAAX,CAA0BE,GAA7C,EAAkD;AAAED,MAAAA,OAAO,EAAE;AAAX,KAAlD;AACD;;AAEDpB,EAAAA,MAAM,GAAG;AACPf,IAAAA,OAAO,CAACqC,MAAR,CAAe,MAAf;AACArC,IAAAA,OAAO,CAACqC,MAAR,CAAe,KAAf;AACArC,IAAAA,OAAO,CAACqC,MAAR,CAAe,WAAf;AACArC,IAAAA,OAAO,CAACqC,MAAR,CAAe,KAAf;AACArC,IAAAA,OAAO,CAACqC,MAAR,CAAe,WAAf;AAEA,SAAKtC,KAAL,CAAWgB,MAAX,CAAkB;AAChBuB,MAAAA,QAAQ,EAAErC,UADM;AAEhBO,MAAAA,QAAQ,EAAE;AAFM,KAAlB;AAID;;AAEDI,EAAAA,KAAK,GAAG;AACNZ,IAAAA,OAAO,CAACiC,GAAR,CAAY,WAAZ,EAAyB,GAAzB;AACA,SAAKlC,KAAL,CAAWwC,SAAX;AACAZ,IAAAA,OAAO,CAACC,GAAR,CAAY3B,UAAZ;AACD;;AAEDa,EAAAA,gBAAgB,GAAG;AACjBd,IAAAA,OAAO,CAACiC,GAAR,CAAY,WAAZ,EAAyB,SAAzB;AACA,SAAKlC,KAAL,CAAWwC,SAAX;AACD;;AAEDtB,EAAAA,eAAe,GAAG;AAChB,UAAMY,SAAS,GAAG7B,OAAO,CAACwC,GAAR,CAAY,WAAZ,CAAlB;AACA,WAAO,IAAIV,IAAJ,GAAWW,OAAX,KAAuBZ,SAA9B;AACC;;AAvEO;;AA0EZ,MAAMa,WAAW,GAAG,IAAItC,KAAJ,EAApB;AAEA,eAAesC,WAAf","sourcesContent":["import auth0 from 'auth0-js'\nimport Cookies from 'js-cookie'\n\nconst CLIENT_URL = process.env.CLIENT_URL;\n\nclass Auth0 {\n\n  constructor() {\n    this.auth0 = new auth0.WebAuth({\n      domain: 'jakepeg.eu.auth0.com',\n      clientID: '6w0luoKEKUH4QLOImluA81kNf3jLmWbr',\n      redirectUri: `${CLIENT_URL}/callback`,\n      responseType: 'token id_token',\n      scope: 'openid profile'\n    });\n\n    this.login = this.login.bind(this);\n    this.loginAddActivity = this.loginAddActivity.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n  }\n\n  handleAuthentication() {\n    return new Promise((resolve, reject) => {\n      this.auth0.parseHash((err, authResult) => {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          this.setSession(authResult);\n          resolve();\n        } else if (err) {\n          reject(err);\n          console.log(err);\n        }\n      });\n    })\n  }\n\n  setSession(authResult) {\n    // let expiresAt = JSON.stringify((authResult.expiresIn * 1000) + new Date().getTime())\n    \n    // let expiresAt = JSON.stringify(authResult.expiresIn)\n    let expiresAt = new Date();\n    expiresAt.setDate(expiresAt.getDate() + 1)\n    Cookies.set('user', authResult.idTokenPayload, { expires: 1 })\n    Cookies.set('jwt', authResult.idToken, { expires: 1 })\n    Cookies.set('expiresAt', expiresAt, { expires: 1 })\n    Cookies.set('sub', authResult.idTokenPayload.sub, { expires: 1 })\n  }\n\n  logout() {\n    Cookies.remove('user')\n    Cookies.remove('jwt')\n    Cookies.remove('expiresAt')\n    Cookies.remove('sub')\n    Cookies.remove('returnURL')\n\n    this.auth0.logout({\n      returnTo: CLIENT_URL,\n      clientID: '6w0luoKEKUH4QLOImluA81kNf3jLmWbr'\n    })\n  }\n\n  login() {\n    Cookies.set('returnURL', '/')\n    this.auth0.authorize()\n    console.log(CLIENT_URL)\n  }\n\n  loginAddActivity() {\n    Cookies.set('returnURL', '/create')\n    this.auth0.authorize()\n  }\n\n  isAuthenticated() {\n    const expiresAt = Cookies.get('expiresAt')\n    return new Date().getTime() < expiresAt;\n    }\n}\n\nconst auth0Client = new Auth0();\n\nexport default auth0Client"]},"metadata":{},"sourceType":"module"}